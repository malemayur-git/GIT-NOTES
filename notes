Phase-1
==========
# What is VCS. Why we need VCS.
	VCS features.

#
GIT Installation (Ubuntu):
$ sudo apt-get update
$ sudo apt-get install git

Verify Installation:   
	which git
	git --version


GIT Uninstallation:
$ sudo apt-get remove git

#
Setting up mandatory configurations:
=============================================
$ git config --global user.name "swapnil"
$ git config --global user.email "abc@gmail.com"

$ git config --global credential.helper cache

Check the configurations using below command
$ git config --list

Git stores all configurations in below file
"cd /home/swapnil/.gitconfig"

=========
Phase-2
=========
Creating remote repository in github
===============
1. create an account in github.com
	URL: https://github.com

2. login github.com with your credentials. 	
     	click on "new repository" --> "create reopository" 

3. copy the repo URL from Github:
	https://github.com/anuragmah-git/REPO-NAME.git

4. Clone the source code from remote repository using 'git clone' command
	$ git clone https://github.com/anuragmah-git/REPO-NAME.git

5. 	$ cd REPONAME

6. Create some sample code and submit the code to remote repo.
 
	    $ vim Login.java  

	    $ git status

	    $ git add Login.java or git add .

	    $ git commit Login.java -m "login module code"
		
	    $ git push
	     UN and pwd(token)

#
Git Commit structure
	commit id
	User/Email
	Timestamp
	Commit message
	
#
SHA / Version / Revison /commit id 

#
Git Architecture Diagram

	------------------------------------------------------	
	. (Souce area) | ..(Stage) | .git (Local Repository) |
		       |           |			     |
	------------------------------------------------------

	- Centralized VCS -  Ex: CVS/SVN/Clearcase/Perforce
	- Distributed VCS -  Ex: GIT/Bitkeeper

=========
Phase-3
=========
# Understand Git Jargon.
	- Remote Repository --- github server
	- Working/Source Directory ---- (.)
	- Local Repository  ----- (.git)
	- Stage/"Staging Index" ---- (..)


#THis Command is used for check the repository URL.
	$ git remote -v
 
#If you want downlod remote repository then apply this commnad (It is first time activity).
	$ git clone <repo-url>

#If you want to download modified content from remote repo then apply this command, after git pull your modified changes comes in working area.
	$ git pull

#If you want to download modified content from remote repo then apply this command, But you dont want to merge modified content in your working area then apply this command
	$ git fetch
	$ git merge

# Skip staging
	git commit -am "submit all pending changes"

# Creating up Local repository
1. create/initialize a local repository with 'git init' command
	$ mkdir <create-folder>
	$ cd <folder-name>
	$ git init
	$ vim filename
	$ git add . or filename
	$ git commit -m "commit msg"
(Note - Create same folder name repositry in the github server)
	$ git remote add <folder-name> <repo-url>
	$ git push <folder-name> 
	$ git push --set-upstream <folder-name> master (optional)

2. Observe the local repository
	$ ls -a 

3.create some source code.. ex: vim Login.java

4.Adding the file to STAGE.
	$ git add <filename>

5.Commiting the file to local repository
	$ git commit <filename> -m "lgoin module code"

6.Check the log of Login.java using log command.
	$ git log <filename>

========
Phase-4 
========
# History - Deep Dive
	$ git log <filename>
	$ git log

	Options:
		- git log -n2
		- git log --author="swapnil"
		- git log --grep="DB code"		
		- git log --oneline (if we want to see logs on high level that time we can use this command ie. only commit ids and msg)

#Qn.
Show me all logs committed by user "Ram" AND has a commit message "math function" in it.

$ git log --author="swapnil" --grep="abc" -n2

=======
Phase-5
=======
# GIT Commands

1.  
	$ git status 

	$ git diff <filename>

	$ git diff --staged <filename> 

2. Deleting a file

	A.) $ git rm <filename>
	    $ git commit <filename> -m "comment"
	    $ git push
       
4. Renaming a file/folder
	A.) $ git mv Login.java <new-name>
	    $ git commit -m "rename Login"
	    $ git push
